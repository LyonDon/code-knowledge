为另一个对象提供一个替身或者占位符一实现对这个对象的访问

（使用代理模式创建代表，使用代表对象控制对某对象的访问，被代理的对象可以是远程对象，开销大的对象或者需要安全控制的对象）
通过调用代理方法，远程调用可以跨过网络，返回字符串，整数和State对象等

客户（监视器）有时候不知道如何与远程服务器通信，这是就需要代理服务器的存在

远程代理：远程代理作为另一个JVM上的对象的本地代表。获取本地请求，转发给远程代表，再接收远程代表返回的结果，并将结果返回给客户

虚拟代理：作为创建开销大的对象的代理，一般只有在需要的时候才创建远程对象。并且，在对象创建前和创建过程中，代理可以处理请求。但是当对象创建之后，代理就讲请求委托给对象来执行

可以在工厂方法中使用代理。用代理包装主题再返回

代理模式和装饰者模式的区别在于：装饰者模式是为对象增加行为，而代理模式是代表对象，不只是加上动作，还可以保护对象避免不必要的访问

动态代理：运行时才将它的类创建出来。代码开始执行时，还没有Proxy类，是根据需要从传入的接口集建立的

防火墙代理：控制网路资源的访问，保护主题免于恶意用户的入侵
智能引用代理：党主体被引用时，进行额外的动作，例如计算一个对象被引用的次数
缓存代理：为开销大的运算结果提供暂时的存储，允许多可客户共享结果，减少计算或者网络延迟
同步代理：多线程情况下为主题提供安全的访问
复杂隐藏代理：隐藏一个类的复杂集合的复杂度，并进行访问控制。也称为外观代理
写入时复制代理：控制对象的复制，方法是延迟对象的复制，直到客户真的需要为止
